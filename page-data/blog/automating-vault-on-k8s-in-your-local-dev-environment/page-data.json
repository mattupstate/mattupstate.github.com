{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/blog/automating-vault-on-k8s-in-your-local-dev-environment/","result":{"data":{"markdownRemark":{"html":"<p>Maybe you're like me and you're working on a system that is deployed to a Kubernetes cluster that requires Vault as a service to operate.\nMaybe you also want to be able to work on this system locally and for Vault to resemble production to avoid discrepencies with Vault's \"dev\" server mode.\nMaybe you <em>could</em> spend the time to learn the ins and outs of deploying and configuring Vault but you'd rather stay focused on the integration of your system with Vault instead.\nAnd maybe you came to the same question I did:</p>\n<blockquote>\n<p>How can I easily automate the deployment and configuration of Vault in my local development environment and afford myself a decent developer experience?</p>\n</blockquote>\n<p>Here's how I answered this question.\nMaybe it will help you too.</p>\n<h2>Solution</h2>\n<p>The solution is illustrated by <a href=\"https://github.com/mattupstate/local-vault-on-k8s\">this GitHub repository</a>\nIt aims to be:</p>\n<ul>\n<li>Approachable - use only well known, well documented tools</li>\n<li>Minimal - strive for the least amount of tools, commands, etc</li>\n<li>Adaptable - relatively easy to map to other tools and environments</li>\n</ul>\n<h3>Prerequisites</h3>\n<ul>\n<li>A local Kubernetes cluster via one of the following (or similar):\n<ul>\n<li><a href=\"https://docs.docker.com/desktop/kubernetes/\">Docker Desktop</a></li>\n<li><a href=\"https://docs.rancherdesktop.io/ui/preferences/kubernetes\">Rancher Desktop</a></li>\n<li><a href=\"https://minikube.sigs.k8s.io/docs/start/\">minikube</a></li>\n</ul>\n</li>\n<li>The following tools are installed:\n<ul>\n<li><a href=\"https://helm.sh/docs/intro/install/\">Helm</a></li>\n<li><a href=\"https://developer.hashicorp.com/terraform/downloads\">Terraform</a></li>\n<li><a href=\"https://taskfile.dev/installation/\">Task</a></li>\n</ul>\n</li>\n</ul>\n<h3>Instructions</h3>\n<p>Commands to deploy and configure Vault are performed in a specific sequence.\nThey are expressed in <code class=\"language-text\">Taskfile.yaml</code> and broken into two logical stages.\nAssuming a clean Kubernetes cluster, all stages can be executed by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ task vault</code></pre></div>\n<p>The following describes the two logical phases encapsulated by this task:</p>\n<h4>Deployment</h4>\n<p>The <code class=\"language-text\">vault:deploy</code> task deploys Vault via Terraform and Helm from files in the <code class=\"language-text\">./01-deploy</code> directory.\nIt includes a customized \"post-start\" script that initializes and unseals vault automatically.\nThe script also writes down the root token to a well known place in the Vault container.\nExecute this task by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ task vault:deploy</code></pre></div>\n<p>Typically this task does not need to be executed again unless starting from scratch.</p>\n<h4>Configuration</h4>\n<p>The <code class=\"language-text\">vault:configure</code> task applies desired configuration against the running Vault service via Terraform.\nBefore Terraform is run the root token is copied from the Vault container to a local <code class=\"language-text\">.auto.tfvars.json</code> file.\nA temporary port-fowarding process is also created to afford the local environment to connect to Vault.</p>\n<p>Execute this task by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ task vault:configure</code></pre></div>\n<p>This task can be run independently after making changes to Terraform files in <code class=\"language-text\">./02-configure</code> to apply the desired state.</p>\n<h2>Etc</h2>\n<p>This solution was extracted from <a href=\"https://github.com/mattupstate/acme\">mattupstate/acme</a></p>","frontmatter":{"date":"October 03, 2023","slug":"/blog/automating-vault-on-k8s-in-your-local-dev-environment","title":"Automating Vault on Kubernetes in Your Local Development Environment","description":"A relatively minimal way to automate deploying and configuring Vault on a local Kubernetes cluster"}},"metaImageFile":{"relativePath":"images/headshot-summary.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#583828","images":{"fallback":{"src":"/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png","srcSet":"/static/9798db320c5cad183af92ab85933ac64/cef30/headshot-summary.png 531w,\n/static/9798db320c5cad183af92ab85933ac64/d6f8b/headshot-summary.png 1061w,\n/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png 2122w","sizes":"(min-width: 2122px) 2122px, 100vw"},"sources":[{"srcSet":"/static/9798db320c5cad183af92ab85933ac64/45ee3/headshot-summary.webp 531w,\n/static/9798db320c5cad183af92ab85933ac64/af37a/headshot-summary.webp 1061w,\n/static/9798db320c5cad183af92ab85933ac64/c2899/headshot-summary.webp 2122w","type":"image/webp","sizes":"(min-width: 2122px) 2122px, 100vw"}]},"width":2122,"height":1070}}}},"pageContext":{"id":"0322255a-09b5-5e6d-acb5-61fdf7d2cbe3","frontmatter__slug":"/blog/automating-vault-on-k8s-in-your-local-dev-environment","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2052298874"]}