{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/blog/database-migrations-with-alembic-sqlalchemy-and-flask/","result":{"data":{"markdownRemark":{"html":"<p>Recently I started using <a href=\"http://alembic.readthedocs.org/\">Alembic</a> for managing database migrations for a Flask application at <a href=\"http://www.chatid.com/\">work</a>. Alembic is developed and maintained by the maker of SQLAlchemy, thus it was immediately an attractive tool. I've been using it the last month or so and without a doubt I've had a pleasant experience using it so far. In this post I want to share a couple of things that I did with Alembic while developing a Flask app that might prove useful for other developers out there.</p>\n<h3>The Database Connection</h3>\n<p>Alembic, mostly, makes no assumptions about your database connection. Generally speaking, when you initialize Alembic for your project you will use the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">alembic init alembic</code></pre></div>\n<p>The only assumption Alembic makes during this process is that you'll have one place to store your database connection setting. That is in the generated file named <code class=\"language-text\">alembic.ini</code>. In this file there will be a line that reads:</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">sqlalchemy.url</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">driver://user:pass@localhost/dbname</span></code></pre></div>\n<p>This is a great place to get started but keeping the database connection setting in this file isn't sustainable for any application that has various environments or differences in connection settings.</p>\n<p>Alembic also creates another file named <code class=\"language-text\">env.py</code> that is located in the folder named <code class=\"language-text\">alembic</code>. It is in this file that Alembic creates the SQLAlchemy engine object using the options specified in <code class=\"language-text\">alembic.ini</code>. This happens in a method called <code class=\"language-text\">run_migrations_online</code>.</p>\n<p>It is also in this file that you can work some magic so that Alembic will connect to the appropriate database. In my case I was developing a Flask application using the Flask-SQLALchemy extension and the database connection is specified in the application configuration file: <code class=\"language-text\">myapp/config.py</code>. Given that my configuration file is a plain Python file it was very easy to pass that value to Alembic. The <code class=\"language-text\">run_migrations_online</code> method of my <code class=\"language-text\">env.py</code> file now looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">run_migrations_online</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Override sqlalchemy.url value to application's value</span>\n    alembic_config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>get_section<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>config_ini_section<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">from</span> myapp <span class=\"token keyword\">import</span> config <span class=\"token keyword\">as</span> app_config\n    alembic_config<span class=\"token punctuation\">[</span><span class=\"token string\">'sqlalchemy.url'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> app_config<span class=\"token punctuation\">.</span>SQLALCHEMY_DATABASE_URI\n\n    engine <span class=\"token operator\">=</span> engine_from_config<span class=\"token punctuation\">(</span>\n                alembic_config<span class=\"token punctuation\">,</span>\n                prefix<span class=\"token operator\">=</span><span class=\"token string\">'sqlalchemy.'</span><span class=\"token punctuation\">,</span>\n                poolclass<span class=\"token operator\">=</span>pool<span class=\"token punctuation\">.</span>NullPool<span class=\"token punctuation\">)</span>\n\n    connection <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    context<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">(</span>\n                connection<span class=\"token operator\">=</span>connection<span class=\"token punctuation\">,</span>\n                target_metadata<span class=\"token operator\">=</span>target_metadata\n                <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> context<span class=\"token punctuation\">.</span>begin_transaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            context<span class=\"token punctuation\">.</span>run_migrations<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        connection<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This file now works in all the application's environments so long as <code class=\"language-text\">config.py</code> is properly configured.</p>\n<h3>Autogenerating Migrations</h3>\n<p>One handy feature of Alembic is the ability to autogenerate migration files based on your SQLAlchemy models. This feature simply relies on specifying the MetaData object for your models. Given that I was using Flask-SQLAlchemy all I had to do was pass the preconfigured MetaData object to Alembic. This object is accessible on the instance of the Flask-SQLAlchemy extension object which in my app happens to in the <code class=\"language-text\">myapp.core</code> module.</p>\n<p>Within <code class=\"language-text\">env.py</code> you'll see a commented out line that may look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># target_metadata = mymodel.Base.metadata</span></code></pre></div>\n<p>In my case I changed this the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> myapp<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> db\ntarget_metadata <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>metadata</code></pre></div>\n<p>Now with my properly configured database connection and MetaData object in place I can autogenerate migrations with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">alembic revision <span class=\"token parameter variable\">--autogenerate</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Added some table\"</span></code></pre></div>\n<p>Just bear in mind that autogenerating migrations isn't the end all be all command. I does not account for everything that can be done during a migration. For instance, if you want to add indexes on particular fields you'll need to write that in yourself. Lastly, if you add anything by hand remember to modify both the <code class=\"language-text\">upgrade</code> and <code class=\"language-text\">downgrade</code> methods!</p>","frontmatter":{"date":"November 16, 2012","slug":"/blog/database-migrations-with-alembic-sqlalchemy-and-flask","title":"Database Migrations with Alembic, SQLAlchemy and Flask","description":null}},"metaImageFile":{"relativePath":"images/headshot-summary.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#583828","images":{"fallback":{"src":"/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png","srcSet":"/static/9798db320c5cad183af92ab85933ac64/cef30/headshot-summary.png 531w,\n/static/9798db320c5cad183af92ab85933ac64/d6f8b/headshot-summary.png 1061w,\n/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png 2122w","sizes":"(min-width: 2122px) 2122px, 100vw"},"sources":[{"srcSet":"/static/9798db320c5cad183af92ab85933ac64/45ee3/headshot-summary.webp 531w,\n/static/9798db320c5cad183af92ab85933ac64/af37a/headshot-summary.webp 1061w,\n/static/9798db320c5cad183af92ab85933ac64/c2899/headshot-summary.webp 2122w","type":"image/webp","sizes":"(min-width: 2122px) 2122px, 100vw"}]},"width":2122,"height":1070}}}},"pageContext":{"id":"b3ba7823-0f37-509d-806d-ce637bb48516","frontmatter__slug":"/blog/database-migrations-with-alembic-sqlalchemy-and-flask","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":["2052298874"]}