{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-js","path":"/null/","result":{"data":{"markdownRemark":{"html":"<h1>How to afford yourself a reasonable local development experience with Kubernetes</h1>\n<h1>How to afford yourself a decent local development experience with HashiCorp Vault</h1>\n<h1>How to make local development with Kubernetes not suck</h1>\n<h1>Local development with Kubernetes on a budget [with Skaffold]</h1>\n<h1>You really should be using Skaffold</h1>\n<h1>Local Development with Kubernetes sucks, but it's never been better</h1>\n<h1>Skaffold, the underrated local development tool for Kubernetes</h1>\n<h1>A reasonable local development experience with Kubernetes</h1>\n<h1>A decent local development experience with Kubernetes</h1>\n<h1>Taskfile's are rad</h1>\n<h1>Interfaces, interfaces, interfaces</h1>\n<h1>You're local development environment has an API wether you realize it or not</h1>\n<h1>Using the 1Password CLI to improve your team's local development experience</h1>\n<h1>Improve your local development experience with the 1Password CLI</h1>\n<h1>Getting to know the HashiCorp Vault Agent Sidecar Injector</h1>\n<h1>Working with Vault on Kubernetes Locally</h1>\n<h1>Portable Local Development Environments are Almost Always an Afterthought</h1>\n<h1>A rant about how local development environments are an afterthought</h1>\n<h1>OpenAPI Specs: to generate or to do by hand? Is there a middle ground?</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Generating is _awesome_ for getting off the ground.\nThe spec is easier to read at a high level than code that implements the spec.\nAnd as such, it's reasonable to _propose_ a change without doing any implementation first. \nThe spec serves as a collaboration tool/artifact in this case.\nThe static spec can be used to test the generated spec.</code></pre></div>\n<h1>e2e tests generated from OpenAPI specs</h1>\n<hr>\n<h2>slug: /blog/using-litestar-with-yjs-pycrdt-and-codemirror-for-collaborative-editing\ntitle: Using Litestar with yjs, pycrdt and CodeMirror for Collaborative Editing\ndate: 2024-01-29\ndescription: A minimal example of how to use Litestar's channels plugin, jys, and pycrdt to enable collaborative editing with CodeMirror</h2>","frontmatter":{"date":null,"slug":null,"title":"","description":null}},"metaImageFile":{"relativePath":"images/headshot-summary.png","childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#583828","images":{"fallback":{"src":"/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png","srcSet":"/static/9798db320c5cad183af92ab85933ac64/cef30/headshot-summary.png 531w,\n/static/9798db320c5cad183af92ab85933ac64/d6f8b/headshot-summary.png 1061w,\n/static/9798db320c5cad183af92ab85933ac64/38397/headshot-summary.png 2122w","sizes":"(min-width: 2122px) 2122px, 100vw"},"sources":[{"srcSet":"/static/9798db320c5cad183af92ab85933ac64/45ee3/headshot-summary.webp 531w,\n/static/9798db320c5cad183af92ab85933ac64/af37a/headshot-summary.webp 1061w,\n/static/9798db320c5cad183af92ab85933ac64/c2899/headshot-summary.webp 2122w","type":"image/webp","sizes":"(min-width: 2122px) 2122px, 100vw"}]},"width":2122,"height":1070}}}},"pageContext":{"id":"523fc582-6694-5306-bc11-3086c2a2d2f4","frontmatter__slug":null,"__params":{"frontmatter__slug":"null"}}},"staticQueryHashes":["2052298874"]}